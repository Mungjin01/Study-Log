배열: 메모리 상에 원소를 연속하게 배치한 자료구조 → 같은 타입으로 된 여러 개의 객체를 한 번에 다루고자 할 때 사용된다.

![배열1.PNG](https://i.esdrop.com/d/f/AfOYjCl4ON/i6iLeKBmu7.png)

- O(1)에 k번째 원소를 확인/변경 가능
    - 메모리 상에 원소를 연속하게 배치하였기에 k번째 원소의 위치를 바로 계산할 수 있다. 시작 주소에서 k칸 만큼 오른쪽으로 가면 되기 때문
- 다른 자료구조와 달리 추가적으로 소모되는 메모리의 양이 거의 없다
- Cache hit rate가 높다 (메모리 상에 데이터들이 붙어있기 때문)
- 메모리 상에 연속한 구간을 잡아야 해서 할당에 제약이 걸림

```cpp
#include <bits/stdc++.h>
using namespace std;

void insert(int idx, int num, int arr[], int& len){
  for(int i = len; i > idx; i--)
    arr[i] = arr[i-1];
  arr[idx] = num;
  len++;
}

void erase(int idx, int arr[], int& len){
  len--;
  for(int i = idx; i < len; i++)
    arr[i] = arr[i+1];
}

void printArr(int arr[], int& len){
  for(int i = 0; i < len; i++) cout << arr[i] << ' ';
  cout << "\n\n";
}

void insert_test(){
  cout << "***** insert_test *****\n";
  int arr[10] = {10, 20, 30};
  int len = 3;
  insert(3, 40, arr, len); // 10 20 30 40
  printArr(arr, len);
  insert(1, 50, arr, len); // 10 50 20 30 40
  printArr(arr, len);
  insert(0, 15, arr, len); // 15 10 50 20 30 40
  printArr(arr, len);
}

void erase_test(){
  cout << "***** erase_test *****\n";
  int arr[10] = {10, 50, 40, 30, 70, 20};
  int len = 6;
  erase(4, arr, len); // 10 50 40 30 20
  printArr(arr, len);
  erase(1, arr, len); // 10 40 30 20
  printArr(arr, len);
  erase(3, arr, len); // 10 40 30
  printArr(arr, len);
}

int main(void) {
  insert_test();
  erase_test();
}
```

insert 함수

```cpp
void insert(int idx, int num, int arr[], int& len){
  for(int i = len; i > idx; i--)
    arr[i] = arr[i-1];
  arr[idx] = num;
  len++;
}
```

if)  i > idx 대신 i >= idx로 작성했다면?
→ idx = 0일 때 arr[0] = arr[-1]이라는 명령이 수행 → 런타임 에러

erase 함수

```cpp
void erase(int idx, int arr[], int& len){
  len--;
  for(int i = idx; i < len; i++)
    arr[i] = arr[i+1];
}
```

ex) 2번째 원소를 지우고 싶으면 3번째부터 9번째까지의 원소들을 왼쪽으로 한 칸씩 밀면 된다. 

Tip.

전체를 특정 값으로 초기화시키는 효율적인 방법

1. cstring 헤더에 있는 memeset 함수 활용 → but 비추천
2. 그냥 for문 돌면서 값 하나하나 바꾸기
3. algorithm 헤더의 fill 함수 이용⭐

## STL vector

: 배열과 거의 동일한 기능을 수행하는 자료구조 → 배열과 마찬가지로 원소가 메모리에 연속하게 저장되어 있기에 O(1)에 인덱스를 가지고 각 원소로 접근 ㄱㄴ (그치만 배열과 달리 크기를 자유자재로 늘이거나 줄일 수 있다👍)

```cpp
#include <bits/stdc++.h>
using namespace std;

int main(void) {
  vector<int> v1(3, 5); // {5,5,5};
  cout << v1.size() << '\n'; // 3
  v1.push_back(7); // {5,5,5,7};

  vector<int> v2(2); // {0,0};
  v2.insert(v2.begin()+1, 3); // {0,3,0};

  vector<int> v3 = {1,2,3,4}; // {1,2,3,4}
  v3.erase(v3.begin()+2); // {1,2,4};

  vector<int> v4; // {}
  v4 = v3; // {1,2,4}
  cout << v4[0] << v4[1] << v4[2] << '\n';
  v4.pop_back(); // {1,2}
  v4.clear(); // {}
}
```

```cpp
vector<int> v1 = {1,2,3,4,5,6};

for(int e:v1) cout << e << ' ';
for(int i=0; i<v1.size(); i++) cout << v1[i] << ' '; //not bad
for(int i=0; i<=v1.size()-1;i++) cout << v1[i] << ' '; //절대절대 안됨
```

int e : v1이라고 하면 복사된 값이 e에 들어가고 int& e : v1이라고 하면 원본이 e에 들어간다. 그렇기에 int e : v1라고 쓴 for문 내에서 e를 바꿔도 v1에는 영향이 가지 않지만, int& e : v1이라고 쓴 for문 내에서는 e를 바꾸면 원본인 v1에서 실제 해당 원소의 값이 바뀌게 된다.

기본적으로 vector의 size 메소드는 시스템에 따라 unsigned int 혹은 unsigned long long을 반환한다.

⇒ vector에 있는 모든 원소를 순회하고 싶으면 range-based for loop를 사용해도 되고 인덱스를 하나씩 돌아도 상관은 없지만 size 메소드의 반환값이 unsigned이기에 마지막처럼 구현하면 안된다.